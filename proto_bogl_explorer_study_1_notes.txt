### Data Types vs. Constructors
- question about data types vs. constructor names both being attributes?
    - maybe odd, but the key aspect is, does it make any difference?
        - no, it does not
        - programs with the same types but different type constructors are different, but related, and without both we cannot show how they are both different and related.
- originally data types were nodes, constructors were edges
    - but this didn't allow us to account for some awkward situations
    - where a node & an edge have the same name
    - so both nodes, similar nodes were subsumed
    - this was before doing FCA properly

### Syntax related stuff
- used to write mock languages
- mock for BoGL as well
- but then tapped into the language directly
- (obs) perhaps, rather than trying to 'fix' things continually, this (the complexity of even the basic program) is indicative of the overhead required to be able to write even a simple program, and suggests a minimum level of understanding to be able to write a program. This would be the smallest set of examples required to be able to know how to write any program in the given language. Such prior understanding is critical to getting a foothold, but not covered by this then? You can't analyze anything other than a program here.
- Also had a RegExp approach with a small online web-tool
    - this was used to demonstrate the concepts in programs present, with an ordering
    - but it was still crude, and ineffective (too far from the real thing)

### Purpose
Explainability through Program Concept Decomposition / Self-Explaining Programs**
  - **AND:: Improving understandability by formalizing a conceptual explanation system to make program explanations consistent and comparable, and improve vocabulary volume, understanding, and usage of learners**
  - 

### Hypothesis
- our original hypothesis: Can we use a grammar representation of a language to determine the quality of teaching material?
    - changed: can programs be evaluated in terms of pedagogical quality by using concept graphs composed of the grammatical structure of a language, and the concepts used by a given program?
    - currently I think..: Can we use the Abstract Syntax of a language to determine a presentation ordering of teaching material?
        - depends on your language, depends on how it is represented via AS
- we are assuming Behavioral learning theory holds for how students learn, and that constructivist theories will hold for learning how syntax is built (building their language skills upwards)
    - this doesn't hold in all cases, but it allows us to proceed on the basis of that knowledge is constructed off of "prior programming experience".
- Objectives we had
    - 1) teach good (programming) habits
        - provide quality examples
    - 2) minimize unnecessary addons (to teaching examples)
    - 3) teach the goals in question, and do not go past them
        - provide numerous unit examples, for just a concept (2 & 3)
- Jan 2021 goal: to produce a system that can help teachers reason about about their programs by extracting the abstract concepts represented by the concrete implementation of a program, and providing a reasoning system in concrete steps that allows an instructor to connect understanding of a previous concept to that of a new concept, by way of a series of concrete examples
    - effectively, a system that can take a program and help an instructor reason about their program dependencies in a series of steps, much like breaking down the steps of derivative or an integration of an equation
- Now: Can a partial ordering on programs with respect to their unique syntactic structures be suitable criteria for guiding educational examples?

### Future work
- this could be done at a more granular level as well, at functions, or expressions
    - this could be used to perform actions such as factoring with regards to conceptual ordering (ordering simpler functions first, such that reading top down doesn't miss anything)
- could be done with typechecked trees as well in a similar fashion
- Should it be that there should be a formal specification for extracting the intermediate representation of a complete program in a language?
    - ...check if one exists...
    - if so, such an approach could be used with this system (or other systems) to provide a more structured approach towards teaching concepts in a given language.
    - this is not the only way to do this, but it is a start...
- The way the system is currently designed, other languages can be substituted in to provide explanations for students that don't speak English...whilst keeping the same structural relationships

### Other notes...
- be SUPER clear exactly how we are converting an AST into attributes...this needs to be ABUNDANTLY clear and not nebulous
    - I still think using Data types & Constructors could work...but I'm not so sure reading back now
- Find existing research on commonly held CS concepts...
- Find existing research on learning concrete syntax vs. abstract syntax...
- READING https://search.library.oregonstate.edu/permalink/f/1g9lfhc/TN_cdi_gale_infotracacademiconefile_A205363726