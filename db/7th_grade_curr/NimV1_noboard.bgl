--Develop this based on the Algorithm we developed
--Algorithm: Play Nim with only one heap of N objects and 2 players
---------------------------------------------------------------------------------------
--What type of information do we get as input and output
--Input: number of objects in our heap (heap), objects to remove from the heap (objectsToRemove), which are both an Integer value
--Integer can be any whole number and is algready defined

--Output: winner, which is a Player
--Player can be the player going first or second {Player1Name, Player2Name}
---------------------------------------------------------------------------------------
--Name of the function/task and the type of information that is input and output
--playNim: Player, Int -> Player

--Definition of the task/function that does not take input, but gets input in task
--playNim (curPlayer, heap):
--   WHILE the heap is not equal to 0 DO
--       Get objectsToRemove from curPlayer
--       Remove objectsToRemove from heap
--       Switch curPlayer to the next player 
--   Output who took the last object as the winner

game NIMv1
type Player= {Player1Name, Player2Name}
type Input = Int

getObjectsToRemove: Int -> Int
getObjectsToRemove(heap) =
   let objectsToRemove = input in
   if or(objectsToRemove < 1, or(objectsToRemove > 3, objectsToRemove>heap)) then
      getObjectsToRemove(heap)
   else
      objectsToRemove

removeObjects: (Int, Int) -> Int
removeObjects(objectsToRemove, heap)= heap - objectsToRemove

switchPlayer: Player -> Player
switchPlayer(curPlayer) =
   if curPlayer == Player1Name then
	   Player2Name 
   else
	   Player1Name 

getPlayer: (Int, Player) -> Player
getPlayer(heap, player) = player

play: (Int, Player) -> (Int, Player)
play(heap, curPlayer) =
   while heap /= 0 do (
      let objects=getObjectsToRemove(heap) in 
         removeObjects(objects, heap), 
         switchPlayer(curPlayer)
   )

playNim: (Int, Player) -> Player
playNim(heap, curPlayer) = let x = play(heap, curPlayer) in switchPlayer(getPlayer(x))