## Query to produce lattice1

game K

v : Int
v = 1

-------

game G

v : Int
v = 2 + 1 * 4 - 4 / 5

## Query to produce lattice2

game Known

v : Int
v = let z = 2 in
    z

------------

game Goal

v : (Int,Int)
v = let x = 2 + 2 in
    let y = 4 * 4 in
    (x,y)

## Query to produce lattice3

{-
ALGORITHM for deciding who does the dishes:

Jack picks H or T for the winning side
Rosa tosses the coin
IF the coin toss is equal to the pick THEN
     Jack does the dishes
ELSE
     Rosa does the dishes
-}

-- Coin Toss program without comments to show comparison to algorithm
-- Example RUN: whoDoesDishes(H, T)
game CoinToss

type Coin = {H, T}
type Child = {Jack, Rosa}

whoDoesDishes : (Coin, Coin) -> Child
whoDoesDishes(pick, toss) = if toss == pick then
                               Rosa
                            else
                               Jack

-----------------------------------------------------------------------


game TicTacToe

type Player = {X, O}
type Space = Player & {Empty}
type Result = Player & {Tie}
type Position = (Int,Int)
type T2 = Board & {E2,E3}

type Board = Array (3,3) of Space
type Input = Position

initialBoard : Board
initialBoard!(x,y) = Empty

next : Player -> Player
next(p) = if p == X then O else X

goFirst : Player
goFirst = X

outcome : (Player, Board) -> Result
outcome(p, b) = if inARow(3,X,b) then X else
                if inARow(3,O,b) then O else Tie

threeInARow : Board -> Bool
threeInARow(b) = or(inARow(3,X,b), inARow(3,O,b))

gameOver : Board -> Bool
gameOver(b) = or(threeInARow(b), isFull(b))

isValid : (Board,Position) -> Bool
isValid(b,p) = if b ! p == Empty then True else False

tryMove : (Player,Board) -> (Player, Board)
tryMove(p,b) = let pos = input in
                   if isValid(b,pos) then (next(p), place(p,b,pos))
                                     else (p, b)

loop : (Player,Board) -> (Player ,Board)
loop(p,b) = while not(gameOver(b)) do tryMove(p,b)

play : (Player,Board) -> Result
play(a,b) = outcome(loop(a,b))

result : Result
result = play(goFirst, initialBoard)
